Next steps to test the xreceive & xtransmit in RPi O/S follow with getting XModem working in Pascal for Ultibo.

Requires:

openocd050322-610f137 built and installed /home/devel/local/openocd/bin/openocd

/home/devel/picotool/build//picotool

qemu-6.2.0 built and installed /home/devel/qemu-6.2.0-rpios/bin/qemu-system-arm

I use 2 Raspberry Pi 4B wih pico connected both with SWB & USB

. Ultibo_Projects/picoultibo.sh This adds openocd, picotool, and QEMU to PATH

This clones from develone at github rp2040-freertos-project with module freertos
and pico-sdk with module tinyusb

Ultibo_Projects/rebuild-repo.sh

cd rp2040-freertos-project

ls littlefs/
bd         lfs.c  lfs_util.c  LICENSE.md  README.md  SPEC.md

cp -R missing-littlefs/* littlefs/

ls littlefs/
bd              DESIGN.md  lfs.h       lfs_util.h  Makefile  README.md  SPEC.md
CMakeLists.txt  lfs.c      lfs_util.c  LICENSE.md  module    scripts    tests

cd build/

cmake ..

make

openocd -f interface/raspberrypi-swd.cfg -f target/rp2040.cfg -c "program test-read-crc16/test-read-crc16.elf verify reset exit"

In a 2nd shell run minicom

| A -    Serial Device      : /dev/ttyACM0                              |
    | B - Lockfile Location     : /var/lock                                 |
Pres| C -   Callin Program      :                                           |
    | D -  Callout Program      :                                           |
    | E -    Bps/Par/Bits       : 1000000 8N1                               |
    | F - Hardware Flow Control : No                                        |
    | G - Software Flow Control : No                                        |
    | H -     RS485 Enable      : No                                        |
    | I -   RS485 Rts On Send   : No                                        |
    | J -  RS485 Rts After Send : No                                        |
    | K -  RS485 Rx During Tx   : No                                        |
    | L -  RS485 Terminate Bus  : No                                        |
    | M - RS485 Delay Rts Before: 0                                         |
    | N - RS485 Delay Rts After : 0                                         |
    |                                                                       |
    |    Change which setting?
creating a library was not the correct way to merge pshell with rp2040-freertos-project
crc16.c  crc16.h fs.c was used to create libcrc16.a
a library for littlefs was needed.

add_library(littlefs INTERFACE)
target_include_directories(littlefs INTERFACE ${CMAKE_CURRENT_LIST_DIR}/module)
target_sources(littlefs INTERFACE
    ${CMAKE_CURRENT_LIST_DIR}/module/lfs.c
    ${CMAKE_CURRENT_LIST_DIR}/module/lfs_util.c
    ${CMAKE_CURRENT_LIST_DIR}/module/lfs.h
    ${CMAKE_CURRENT_LIST_DIR}/module/lfs_util.h)
 
Using the folder module found in missing-littlefs/module/

Note: Currently following a clean clone of the repo 
cp -R missing-littlefs/* littlefs before performin cmake .. & make in the build.

The following files from pshell       
vi.c  xcommon.h   xreceive.h   xtransmit.h fs.h  vi.h  xreceive.c  xtransmit.c 
were added to test-read-crc16/main.c 



From the start 
/* vi: set sw=4 ts=4: */
/* SPDX-License-Identifier: GPL-3.0-or-later */

/* Copyright (C) 1883 Thomas Edison - All Rights Reserved
 * You may use, distribute and modify this code under the
 * terms of the BSD 3 clause license, which unfortunately
 * won't be written for another century.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * A little flash file system manager for the Raspberry Pico
 */

#include <ctype.h>
#include <errno.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>

#include "hardware/watchdog.h"

#include "pico/stdio.h"
#include "pico/stdlib.h"
test-read-crc16/pshell.h
 to main.c became pshell.h
	.
	.
	.

        rc = true;
    } while (false);
    return rc;
}

// application entry point
int main(void) {

This became a freertos task

void pshell(void *pvParameters)
{
        while(true) {
                //printf("This is a place holder for the pshell task\n");

   while (run) {
        printf("%s: ", full_path(""));
        fflush(stdout);
        parse_cmd();
        bool found = false;
        int i;
        result[0] = 0;
        if (argc)
            for (i = 0; i < sizeof cmd_table / sizeof cmd_table[0]; i++)
                if (strcmp(argv[0], cmd_table[i].name) == 0) {
                    cmd_table[i].func();
                              

cmd_table[i].name, cmd_table[i].descr);
                    found = true;
                    break;
                }
        if (!found) {
            if (argc)
                printf("command unknown!\n\n");
            for (int i = 0; i < sizeof cmd_table / sizeof cmd_table[0]; i++)
                printf("%7s - %s\n", cmd_table[i].name, cmd_table[i].descr);
            printf("\n");
            continue;
        }
        printf("%s\n", result);
    }
                vTaskDelay (35000); 
        }
}

commit 90750143f558fe6d4ed36902ee56942709202f8e (HEAD -> master, origin/master, origin/HEAD)
Author: Edward Vidal Jr <develone@sbcglobal.net>
Date:   Fri May 27 20:23:00 2022 -0600

    This files are missing from littlefs

Missing littlefs/CMakeLists.txt

add_library(littlefs INTERFACE)
target_include_directories(littlefs INTERFACE ${CMAKE_CURRENT_LIST_DIR}/module)
target_sources(littlefs INTERFACE
    ${CMAKE_CURRENT_LIST_DIR}/module/lfs.c
    ${CMAKE_CURRENT_LIST_DIR}/module/lfs_util.c
    ${CMAKE_CURRENT_LIST_DIR}/module/lfs.h
    ${CMAKE_CURRENT_LIST_DIR}/module/lfs_util.h)

tree ../littlefs/module/
../littlefs/module/
├── bd
│   ├── lfs_filebd.c
│   ├── lfs_filebd.h
│   ├── lfs_rambd.c
│   ├── lfs_rambd.h
│   ├── lfs_testbd.c
│   └── lfs_testbd.h
├── DESIGN.md
├── lfs.c
├── lfs.h
├── lfs_util.c
├── lfs_util.h
├── LICENSE.md
├── Makefile
├── README.md
├── scripts
│   ├── code.py
│   ├── coverage.py
│   ├── explode_asserts.py
│   ├── prefix.py
│   ├── readblock.py
│   ├── readmdir.py
│   ├── readtree.py
│   └── test.py
├── SPEC.md
└── tests
    ├── test_alloc.toml
    ├── test_attrs.toml
    ├── test_badblocks.toml
    ├── test_dirs.toml
    ├── test_entries.toml
    ├── test_evil.toml
    ├── test_exhaustion.toml
    ├── test_files.toml
    ├── test_interspersed.toml
    ├── test_move.toml
    ├── test_orphans.toml
    ├── test_paths.toml
    ├── test_relocations.toml
    ├── test_seek.toml
    ├── test_superblocks.toml
    └── test_truncate.toml

3 directories, 39 files

root@pi4-28:/home/devel# lsusb
Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 001 Device 005: ID 2e8a:000a Raspberry Pi Pico
Bus 001 Device 003: ID 046d:c534 Logitech, Inc. Unifying Receiver
Bus 001 Device 002: ID 2109:3431 VIA Labs, Inc. Hub
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
root@pi4-28:/home/devel# picotool info --bus 1 --address 5 -f -a
The device was asked to reboot into BOOTSEL mode so the command can be executed.

Program Information
 name:          test-read-crc16
 features:      UART stdin / stdout
                USB stdin / stdout
 binary start:  0x10000000
 binary end:    0x1002662c

Fixed Pin Information
 0:  UART0 TX
 1:  UART0 RX

Build Information
 sdk version:       1.3.0
 pico_board:        pico
 boot2_name:        boot2_w25q080
 build date:        May 27 2022
 build attributes:  Release

Device Information
 flash size:   2048K
 ROM version:  2

               The device was asked to reboot back into application mode.